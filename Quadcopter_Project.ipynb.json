{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Project: Train a Quadcopter How to Fly\n",
    "\n",
    "Design an agent to fly a quadcopter, and then train it using a reinforcement learning algorithm of your choice! \n",
    "\n",
    "Try to apply the techniques you have learnt, but also feel free to come up with innovative ideas and test them."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Instructions\n",
    "\n",
    "Take a look at the files in the directory to better understand the structure of the project. \n",
    "\n",
    "- `task.py`: Define your task (environment) in this file.\n",
    "- `agents/`: Folder containing reinforcement learning agents.\n",
    "    - `policy_search.py`: A sample agent has been provided here.\n",
    "    - `agent.py`: Develop your agent here.\n",
    "- `physics_sim.py`: This file contains the simulator for the quadcopter.  **DO NOT MODIFY THIS FILE**.\n",
    "\n",
    "For this project, you will define your own task in `task.py`.  Although we have provided a example task to get you started, you are encouraged to change it.  Later in this notebook, you will learn more about how to amend this file.\n",
    "\n",
    "You will also design a reinforcement learning agent in `agent.py` to complete your chosen task.  \n",
    "\n",
    "You are welcome to create any additional files to help you to organize your code.  For instance, you may find it useful to define a `model.py` file defining any needed neural network architectures.\n",
    "\n",
    "## Controlling the Quadcopter\n",
    "\n",
    "We provide a sample agent in the code cell below to show you how to use the sim to control the quadcopter.  This agent is even simpler than the sample agent that you'll examine (in `agents/policy_search.py`) later in this notebook!\n",
    "\n",
    "The agent controls the quadcopter by setting the revolutions per second on each of its four rotors.  The provided agent in the `Basic_Agent` class below always selects a random action for each of the four rotors.  These four speeds are returned by the `act` method as a list of four floating-point numbers.  \n",
    "\n",
    "For this project, the agent that you will implement in `agents/agent.py` will have a far more intelligent method for selecting actions!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "\n",
    "class Basic_Agent():\n",
    "    def __init__(self, task):\n",
    "        self.task = task\n",
    "    \n",
    "    def act(self):\n",
    "        new_thrust = random.gauss(450., 25.)\n",
    "        return [new_thrust + random.gauss(0., 1.) for x in range(4)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the code cell below to have the agent select actions to control the quadcopter.  \n",
    "\n",
    "Feel free to change the provided values of `runtime`, `init_pose`, `init_velocities`, and `init_angle_velocities` below to change the starting conditions of the quadcopter.\n",
    "\n",
    "The `labels` list below annotates statistics that are saved while running the simulation.  All of this information is saved in a text file `data.txt` and stored in the dictionary `results`.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import csv\n",
    "import numpy as np\n",
    "from task import Task\n",
    "\n",
    "# Modify the values below to give the quadcopter a different starting position.\n",
    "runtime = 5.                                     # time limit of the episode\n",
    "init_pose = np.array([0., 0., 10., 0., 0., 0.])  # initial pose\n",
    "init_velocities = np.array([0., 0., 0.])         # initial velocities\n",
    "init_angle_velocities = np.array([0., 0., 0.])   # initial angle velocities\n",
    "file_output = 'data.txt'                         # file name for saved results\n",
    "\n",
    "# Setup\n",
    "task = Task(init_pose, init_velocities, init_angle_velocities, runtime)\n",
    "agent = Basic_Agent(task)\n",
    "done = False\n",
    "labels = ['time', 'x', 'y', 'z', 'phi', 'theta', 'psi', 'x_velocity',\n",
    "          'y_velocity', 'z_velocity', 'phi_velocity', 'theta_velocity',\n",
    "          'psi_velocity', 'rotor_speed1', 'rotor_speed2', 'rotor_speed3', 'rotor_speed4']\n",
    "results = {x : [] for x in labels}\n",
    "\n",
    "# Run the simulation, and save the results.\n",
    "with open(file_output, 'w') as csvfile:\n",
    "    writer = csv.writer(csvfile)\n",
    "    writer.writerow(labels)\n",
    "    while True:\n",
    "        rotor_speeds = agent.act()\n",
    "        _, _, done = task.step(rotor_speeds)\n",
    "        to_write = [task.sim.time] + list(task.sim.pose) + list(task.sim.v) + list(task.sim.angular_v) + list(rotor_speeds)\n",
    "        for ii in range(len(labels)):\n",
    "            results[labels[ii]].append(to_write[ii])\n",
    "        writer.writerow(to_write)\n",
    "        if done:\n",
    "            break"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the code cell below to visualize how the position of the quadcopter evolved during the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f37b8594a20>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "plt.plot(results['time'], results['x'], label='x')\n",
    "plt.plot(results['time'], results['y'], label='y')\n",
    "plt.plot(results['time'], results['z'], label='z')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The next code cell visualizes the velocity of the quadcopter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f379c11bbe0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(results['time'], results['x_velocity'], label='x_hat')\n",
    "plt.plot(results['time'], results['y_velocity'], label='y_hat')\n",
    "plt.plot(results['time'], results['z_velocity'], label='z_hat')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, you can plot the Euler angles (the rotation of the quadcopter over the $x$-, $y$-, and $z$-axes),"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f379c066390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(results['time'], results['phi'], label='phi')\n",
    "plt.plot(results['time'], results['theta'], label='theta')\n",
    "plt.plot(results['time'], results['psi'], label='psi')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "before plotting the velocities (in radians per second) corresponding to each of the Euler angles."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f3795fc5be0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(results['time'], results['phi_velocity'], label='phi_velocity')\n",
    "plt.plot(results['time'], results['theta_velocity'], label='theta_velocity')\n",
    "plt.plot(results['time'], results['psi_velocity'], label='psi_velocity')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, you can use the code cell below to print the agent's choice of actions.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f3795fa2c18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(results['time'], results['rotor_speed1'], label='Rotor 1 revolutions / second')\n",
    "plt.plot(results['time'], results['rotor_speed2'], label='Rotor 2 revolutions / second')\n",
    "plt.plot(results['time'], results['rotor_speed3'], label='Rotor 3 revolutions / second')\n",
    "plt.plot(results['time'], results['rotor_speed4'], label='Rotor 4 revolutions / second')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When specifying a task, you will derive the environment state from the simulator.  Run the code cell below to print the values of the following variables at the end of the simulation:\n",
    "- `task.sim.pose` (the position of the quadcopter in ($x,y,z$) dimensions and the Euler angles),\n",
    "- `task.sim.v` (the velocity of the quadcopter in ($x,y,z$) dimensions), and\n",
    "- `task.sim.angular_v` (radians/second for each of the three Euler angles)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 22.47722204 -14.513218    19.58451846   5.72697087   5.12829109   0.        ]\n",
      "[ 14.54219879  -8.51327831  -5.78214108]\n",
      "[-0.17964236 -0.26489034  0.        ]\n"
     ]
    }
   ],
   "source": [
    "# the pose, velocity, and angular velocity of the quadcopter at the end of the episode\n",
    "print(task.sim.pose)\n",
    "print(task.sim.v)\n",
    "print(task.sim.angular_v)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the sample task in `task.py`, we use the 6-dimensional pose of the quadcopter to construct the state of the environment at each timestep.  However, when amending the task for your purposes, you are welcome to expand the size of the state vector by including the velocity information.  You can use any combination of the pose, velocity, and angular velocity - feel free to tinker here, and construct the state to suit your task.\n",
    "\n",
    "## The Task\n",
    "\n",
    "A sample task has been provided for you in `task.py`.  Open this file in a new window now. \n",
    "\n",
    "The `__init__()` method is used to initialize several variables that are needed to specify the task.  \n",
    "- The simulator is initialized as an instance of the `PhysicsSim` class (from `physics_sim.py`).  \n",
    "- Inspired by the methodology in the original DDPG paper, we make use of action repeats.  For each timestep of the agent, we step the simulation `action_repeats` timesteps.  If you are not familiar with action repeats, please read the **Results** section in [the DDPG paper](https://arxiv.org/abs/1509.02971).\n",
    "- We set the number of elements in the state vector.  For the sample task, we only work with the 6-dimensional pose information.  To set the size of the state (`state_size`), we must take action repeats into account.  \n",
    "- The environment will always have a 4-dimensional action space, with one entry for each rotor (`action_size=4`). You can set the minimum (`action_low`) and maximum (`action_high`) values of each entry here.\n",
    "- The sample task in this provided file is for the agent to reach a target position.  We specify that target position as a variable.\n",
    "\n",
    "The `reset()` method resets the simulator.  The agent should call this method every time the episode ends.  You can see an example of this in the code cell below.\n",
    "\n",
    "The `step()` method is perhaps the most important.  It accepts the agent's choice of action `rotor_speeds`, which is used to prepare the next state to pass on to the agent.  Then, the reward is computed from `get_reward()`.  The episode is considered done if the time limit has been exceeded, or the quadcopter has travelled outside of the bounds of the simulation.\n",
    "\n",
    "In the next section, you will learn how to test the performance of an agent on this task."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Agent\n",
    "\n",
    "The sample agent given in `agents/policy_search.py` uses a very simplistic linear policy to directly compute the action vector as a dot product of the state vector and a matrix of weights. Then, it randomly perturbs the parameters by adding some Gaussian noise, to produce a different policy. Based on the average reward obtained in each episode (`score`), it keeps track of the best set of parameters found so far, how the score is changing, and accordingly tweaks a scaling factor to widen or tighten the noise.\n",
    "\n",
    "Run the code cell below to see how the agent performs on the sample task."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Episode = 1000, score =  -0.308 (best =   0.899), noise_scale = 3.255"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "import pandas as pd\n",
    "from agents.policy_search import PolicySearch_Agent\n",
    "from task import Task\n",
    "\n",
    "num_episodes = 1000\n",
    "target_pos = np.array([0., 0., 10.])\n",
    "task = Task(target_pos=target_pos)\n",
    "agent = PolicySearch_Agent(task) \n",
    "\n",
    "for i_episode in range(1, num_episodes+1):\n",
    "    state = agent.reset_episode() # start a new episode\n",
    "    while True:\n",
    "        action = agent.act(state)\n",
    "        next_state, reward, done = task.step(action)\n",
    "        agent.step(reward, done)\n",
    "        state = next_state\n",
    "        if done:\n",
    "            print(\"\\rEpisode = {:4d}, score = {:7.3f} (best = {:7.3f}), noise_scale = {}\".format(\n",
    "                i_episode, agent.score, agent.best_score, agent.noise_scale), end=\"\")  # [debug]\n",
    "            break\n",
    "    sys.stdout.flush()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This agent should perform very poorly on this task.  And that's where you come in!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Define the Task, Design the Agent, and Train Your Agent!\n",
    "\n",
    "Amend `task.py` to specify a task of your choosing.  If you're unsure what kind of task to specify, you may like to teach your quadcopter to takeoff, hover in place, land softly, or reach a target pose.  \n",
    "\n",
    "After specifying your task, use the sample agent in `agents/policy_search.py` as a template to define your own agent in `agents/agent.py`.  You can borrow whatever you need from the sample agent, including ideas on how you might modularize your code (using helper methods like `act()`, `learn()`, `reset_episode()`, etc.).\n",
    "\n",
    "Note that it is **highly unlikely** that the first agent and task that you specify will learn well.  You will likely have to tweak various hyperparameters and the reward function for your task until you arrive at reasonably good behavior.\n",
    "\n",
    "As you develop your agent, it's important to keep an eye on how it's performing. Use the code above as inspiration to build in a mechanism to log/save the total rewards obtained in each episode to file.  If the episode rewards are gradually increasing, this is an indication that your agent is learning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "building model\n",
      "building model\n",
      "Episode = 1000, score =   2.355 (best =   2.961)"
     ]
    }
   ],
   "source": [
    "## TODO: Train your agentimport sys\n",
    "import pandas as pd\n",
    "from agents.agent import Christophers_Agent\n",
    "from agents.actor import Actor\n",
    "from task import Task\n",
    "\n",
    "num_episodes = 1000\n",
    "target_pos = np.array([0., 0., 10.])\n",
    "task = Task(init_pose=[0.,0.,0.1,0.,0.,0.], target_pos=target_pos)\n",
    "agent = Christophers_Agent(task) \n",
    "rewards = []\n",
    "for i_episode in range(1, num_episodes+1):\n",
    "    state = agent.reset_episode() # start a new episode\n",
    "    while True:\n",
    "        action = agent.act(state)\n",
    "        next_state, reward, done = task.step(action)\n",
    "        agent.step(action,reward,next_state, done)\n",
    "        state = next_state\n",
    "        if done:\n",
    "            rewards += [agent.get_score()]\n",
    "            print(\"\\rEpisode = {:4d}, score = {:7.3f} (best = {:7.3f})\".format(\n",
    "                i_episode, agent.get_score(), agent.best_score), end=\"\")\n",
    "            break\n",
    "    sys.stdout.flush()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Plot the Rewards\n",
    "\n",
    "Once you are satisfied with your performance, plot the episode rewards, either from a single run, or averaged over multiple runs. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "building model\n",
      "building model\n"
     ]
    }
   ],
   "source": [
    "## TODO: Plot the reward%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "import csv\n",
    "import numpy as np\n",
    "from task import Task\n",
    "\n",
    "# Modify the values below to give the quadcopter a different starting position.\n",
    "runtime = 5.                                     # time limit of the episode\n",
    "init_pose = np.array([0., 0., 0.1, 0., 0., 0.])  # initial pose\n",
    "init_velocities = np.array([0., 0., 0.])         # initial velocities\n",
    "init_angle_velocities = np.array([0., 0., 0.])   # initial angle velocities\n",
    "file_output = 'data.txt'                         # file name for saved results\n",
    "\n",
    "# Setup\n",
    "task = Task(init_pose, init_velocities, init_angle_velocities, runtime)\n",
    "agent = Christophers_Agent(task)\n",
    "done = False\n",
    "labels = ['time', 'x', 'y', 'z', 'phi', 'theta', 'psi', 'x_velocity',\n",
    "          'y_velocity', 'z_velocity', 'phi_velocity', 'theta_velocity',\n",
    "          'psi_velocity', 'rotor_speed1', 'rotor_speed2', 'rotor_speed3', 'rotor_speed4']\n",
    "results = {x : [] for x in labels}\n",
    "# Run the simulation, and save the results.\n",
    "with open(file_output, 'w') as csvfile:\n",
    "    writer = csv.writer(csvfile)\n",
    "    writer.writerow(labels)\n",
    "    #for i_episode in range(1, num_episodes+1):\n",
    "    state = agent.reset_episode()\n",
    "    while True:\n",
    "        action = agent.act(state) \n",
    "        next_state, reward, done = task.step(action)\n",
    "        agent.step(action,reward,next_state, done)\n",
    "        state = next_state\n",
    "        rotor_speeds = agent.act(state)\n",
    "        _, _, done = task.step(rotor_speeds)\n",
    "        to_write = [task.sim.time] + list(task.sim.pose) + list(task.sim.v) + list(task.sim.angular_v) + list(rotor_speeds)\n",
    "        for ii in range(len(labels)):\n",
    "            results[labels[ii]].append(to_write[ii])\n",
    "        writer.writerow(to_write)\n",
    "        if done:\n",
    "            break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f3762bbc4e0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "plt.plot(results['time'], results['x'], label='x')\n",
    "plt.plot(results['time'], results['y'], label='y')\n",
    "plt.plot(results['time'], results['z'], label='z')\n",
    "plt.legend()\n",
    "_ = plt.ylim()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f375eef30f0>]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f376cda2978>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1, num_episodes+1), rewards, label='rewards')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Reflections\n",
    "\n",
    "**Question 1**: Describe the task that you specified in `task.py`.  How did you design the reward function?\n",
    "\n",
    "**Answer**: The task and goal for my quadcopter in this project was to take off and move towards a z postion of 10 while moving in the x and y coordinates as little as possible. The reward function was set up to increase the reward proportionally to how high the quadcopter was, while also decreaseing the reward propotionally to how much change there was in the x and y coordinates. The reward function was also clipped in order to make learning easier for the neural networks. \n",
    "\n",
    "I both added extra reward considerations for the z velocity and clipped the rewards in order to help the agent learn.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 2**: Discuss your agent briefly, using the following questions as a guide:\n",
    "\n",
    "- What learning algorithm(s) did you try? What worked best for you?\n",
    "- What was your final choice of hyperparameters (such as $\\alpha$, $\\gamma$, $\\epsilon$, etc.)?\n",
    "- What neural network architecture did you use (if any)? Specify layers, sizes, activation functions, etc.\n",
    "\n",
    "**Answer**: I ended up using the DDPG alrogithm suggested for this module. This involes an agent, actor, and critic all working to simulate Q-Learning for a 3 dimensional continuous task. \n",
    "\n",
    "I tried countless hyperparameters and found that these worked best for me: and alpha of 0.001, a gamma of 0.95, a noise mean of 0.5, a noise decay of 0.2, and a noise variance of 0.4. \n",
    "\n",
    "I used Nueral Networks for both the actor and critic. the Actor has 3 layers with 100, 200, and 400 units all using a relu activation function and then a final layer that combined all through a sigmoid. For the critic, two neural networks were used for both the state and actions with three layers. these layers had 100, 200, and then 100 unites and all used the relu activation function. These were then combied and fed through a final sigmoid layer. There is also batch normalization between all layers and drop out after the second layer. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 3**: Using the episode rewards plot, discuss how the agent learned over time.\n",
    "\n",
    "- Was it an easy task to learn or hard?\n",
    "- Was there a gradual learning curve, or an aha moment?\n",
    "- How good was the final performance of the agent? (e.g. mean rewards over the last 10 episodes)\n",
    "\n",
    "**Answer**: This was very difficult to do. The DDPG algorithm was incredibly difficult in itself and I spent lots of time making sure I understood exactly what it was doing. But with so many variables and the amount of time it takes to train any single combination of them, it was a very long process. \n",
    "\n",
    "For me, it was definetly more of a learning curve. I ended up writing down every step of the algorithm on a notebook in detail to comprehend what was going on and what influence what and how. I learned that setting a very low tau did assist in learning over 1000 episodes as well as cliping the rewards betwen -1 and 1. I did sort of have two aha moments though, the first was to set the number of units on the actors neural network to the hundreds instead of single digits as I originally had. I though that since the network was only outputing a very limited number for four blades, small network perceptrons might be helpful. But in the end, more perceptrons ended up being needed. \n",
    "\n",
    "The final performace is vastly improved from my first submission, but still struggles to keep its z position up due to changes in its euler angles. But considering that the maximum reward after clipping was 3, and that my agent learned to average about a 2.4 on rewards each episode, the learning part of this process has been a success. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question 4**: Briefly summarize your experience working on this project. You can use the following prompts for ideas.\n",
    "\n",
    "- What was the hardest part of the project? (e.g. getting started, plotting, specifying the task, etc.)\n",
    "- Did you find anything interesting in how the quadcopter or your agent behaved?\n",
    "\n",
    "**Answer**: This was a really cool and reward experience. It is a toss up between where to start on the project and all the testing with different parameters that made this task so difficult. It was also frustrating how often the best reward the quadcopter received would be substantially higher than the mean score it received. \n",
    "\n",
    "You would think getting a quadcopter to simply lift off wouldnt be that difficult, but it certainly is. Going through this process, you releazed just how difficult and complex the reward structure needs to be in order to get any sort of good results. "
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
